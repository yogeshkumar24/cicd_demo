name: Build & Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    name: Build, Test & Release with Fastlane
    runs-on: macos-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Java (required for Android build)
      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      # Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
#          flutter-version: '3.19.0'
          channel: 'stable'
          architecture: x64

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Install Fastlane
      - name: Install Fastlane
        run: gem install fastlane

      # Decode and set up Keystore for signing the Android app
      - name: Decode and set up Keystore
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
        run: |
          echo "$KEYSTORE" | base64 --decode > /tmp/my-release-key.jks

      # Set up signing config for Android build
      - name: Set up signing config
        run: |
          mkdir -p android/app
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=/tmp/my-release-key.jks" >> android/key.properties

      # Create service_account.json for Google Play upload
      - name: Create service_account.json FROM secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON
        run: echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/service_account.json
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: service_account.json

      # Print the length (size in bytes) of service_account.json
      - name: Print length of service_account.json
        run: |
          if [ -f android/service_account.json ]; then
            echo "Length of service_account.json: $(wc -c < service_account.json) bytes"
          else
            echo "service_account.json not found."
          fi

      # Run Fastlane for Android Release
      - name: Run Fastlane for Android Release
        run: |
          cd android/fastlane
          fastlane android_release

      # Upload to Google Play Internal Testing
      - name: Upload to Google Play Internal Testing
        run: |
          cd android/fastlane
          fastlane deploy_internal

      # Push to GitHub Releases
      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/bundle/release/app-release.aab"
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}
